---
import MainLayout from "@/layouts/MainLayout.astro";
import { actions, isInputError } from "astro:actions";
import PII from "@/components/PII.astro";
import QueryType from "@/components/QueryType.astro";

const result = Astro.getActionResult(actions.request);
const inputErrors = isInputError(result?.error) ? result.error.fields : {};
const success = result?.data === undefined ? false : result?.data && !result?.error;

export const prerender = false;
---

<MainLayout title="Frontend Mentor | Contact Form">
  <main class="bg-theme-green-lighter flex min-h-screen justify-center px-4 py-8 sm:pt-31">
    <div class="bg-theme-white w-85 rounded-2xl p-6 sm:w-xl sm:p-9 md:w-2xl lg:w-[720px]">
      <h1 class="text-theme-grey-darker mb-8 text-3xl font-bold">Contact Us</h1>
      <form method="post" action={actions.request} data-success={success ? "true" : "false"}>
        <div class="sm:grid sm:grid-cols-2 sm:gap-x-4">
          <div class="mb-6 flex flex-col">
            <PII name="firstName" autocomplete="given-name">First Name</PII>
            {
              inputErrors.firstName && (
                <p class="text-theme-red mt-2 text-sm">{inputErrors.firstName}</p>
              )
            }
          </div>
          <div class="mb-6 flex flex-col">
            <PII name="lastName" autocomplete="family-name">Last Name</PII>
            {
              inputErrors.lastName && (
                <p class="text-theme-red mt-2 text-sm">{inputErrors.lastName}</p>
              )
            }
          </div>
          <div class="mb-6 flex flex-col sm:col-span-2">
            <PII name="emailAddress" autocomplete="email">Email Address</PII>
            {
              inputErrors.emailAddress && (
                <p class="text-theme-red mt-2 text-sm">{inputErrors.emailAddress}</p>
              )
            }
          </div>
        </div>

        <div class="mb-7">
          <fieldset
            transition:persist
            id="query-type"
            class="flex flex-col items-start gap-4 sm:grid sm:grid-cols-2 sm:gap-x-4"
            aria-required="true"
            aria-describedby="query-type-help"
          >
            <legend class="mb-4">Query Type <span class="text-theme-green-medium">*</span></legend>
            <p id="query-type-help" class="sr-only">
              Choose an option. Use arrow keys to navigate.
            </p>
            <QueryType uid="general-inquiry" name="type">General Inquiry</QueryType>
            <QueryType uid="support-request" name="type">Support Request</QueryType>
          </fieldset>
          {inputErrors.type && <p class="text-theme-red mt-2 text-sm">{inputErrors.type}</p>}
        </div>

        <div class="mb-8 flex flex-col">
          <label for="message" class="mb-2"
            >Message <span class="text-theme-green-medium">*</span></label
          >
          <textarea
            transition:persist
            name="message"
            id="message"
            class="border-theme-grey-medium focus:border-theme-green-medium h-60 resize-none rounded-lg border-1 px-4 py-2 hover:cursor-pointer focus:outline-none sm:h-24"
            aria-required="true"></textarea>
          {inputErrors.message && <p class="text-theme-red mt-2 text-sm">{inputErrors.message}</p>}
        </div>
        <div class="mb-10">
          <div class="flex items-center gap-x-5">
            <input
              transition:persist
              type="checkbox"
              id="consent"
              name="consent"
              class="border-theme-grey-medium size-5 checked:h-4 checked:appearance-none checked:border-none checked:bg-[url('/icon-checkbox-check.svg')] checked:bg-center sm:size-4"
              aria-required="true"
            />
            <label for="consent"
              >I consent to being contacted by the team <span class="text-theme-green-medium"
                >*</span
              ></label
            >
          </div>
          {inputErrors.consent && <p class="text-theme-red mt-2 text-sm">{inputErrors.consent}</p>}
        </div>

        <button
          class="bg-theme-green-medium text-theme-white hover:bg-theme-grey-darker w-full rounded-lg py-4 text-lg hover:cursor-pointer"
          id="submit">Submit</button
        >
      </form>
    </div>
  </main>
</MainLayout>

<script>
  document.addEventListener("astro:page-load", () => {
    const radioButtons: NodeListOf<HTMLElement> = document.querySelectorAll("input[type='radio']");

    const form = document.querySelector("form") as HTMLFormElement;
    const successValue = form?.getAttribute("data-success");
    if (successValue === "true") {
      radioButtons.forEach((radioButton) => {
        const inquiryDiv = document.getElementById(radioButton.id)?.parentElement?.parentElement;
        inquiryDiv?.classList.remove("bg-theme-green-lighter");
      });
      form.reset();
    }

    radioButtons.forEach((radioButton) => {
      radioButton.addEventListener("click", (event) => {
        const target: HTMLElement = event.target as HTMLElement;
        handleRadioButtonClick(target.id);
      });
    });

    const handleRadioButtonClick = (id: string) => {
      radioButtons.forEach((radioButton) => {
        const inquiryDiv = document.getElementById(radioButton.id)?.parentElement?.parentElement;
        if (radioButton.id === id) {
          inquiryDiv?.classList.add("bg-theme-green-lighter");
        } else {
          inquiryDiv?.classList.remove("bg-theme-green-lighter");
        }
      });
    };

    const fieldset = document.getElementById("query-type") as HTMLElement;
    const firstRadioButton = document.getElementById("general-inquiry") as HTMLInputElement;
    fieldset.addEventListener(
      "focus",
      () => {
        const inquiryDiv = document.getElementById(firstRadioButton.id)?.parentElement
          ?.parentElement;
        inquiryDiv?.classList.add("bg-theme-green-lighter");
        firstRadioButton.checked = true;
      },
      true,
    );
  });
</script>
